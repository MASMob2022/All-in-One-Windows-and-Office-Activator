@echo off

mode 128, 47
color 3
title All in One Windows & Office Activator by MAS.DEV 2023

net session >nul 2>&1
if %errorLevel% == 0 (
    goto menu


) ELSE (
   echo Run this Program As Administrator ...
   PAUSE
   EXIT
)



:menu
cls
echo.
echo "
echo "  _    _ _           _                          _____  __  __ _             ___       _   _            _   _             
echo " | |  | (_)         | |                   ___  |  _  |/ _|/ _(_)           / _ \     | | (_)          | | (_)            
echo " | |  | |_ _ __   __| | _____      _____ ( _ ) | | | | |_| |_ _  ___ ___  / /_\ \ ___| |_ ___   ____ _| |_ _  ___  _ __  
echo " | |/\| | | '_ \ / _` |/ _ \ \ /\ / / __|/ _ \/\ | | |  _|  _| |/ __/ _ \ |  _  |/ __| __| \ \ / / _` | __| |/ _ \| '_ \ 
echo " \  /\  / | | | | (_| | (_) \ V  V /\__ \ (_>  < \_/ / | | | | | (_|  __/ | | | | (__| |_| |\ V / (_| | |_| | (_) | | | |
echo "  \/  \/|_|_| |_|\__,_|\___/ \_/\_/ |___/\___/\/\___/|_| |_| |_|\___\___| \_| |_/\___|\__|_| \_/ \__,_|\__|_|\___/|_| |_|
echo "                                                                                                                                                                                                                                                
echo "      Created by MAS.DEV              Important Note: You must be connected to the internet                 v5.0.1/2023
echo.
echo        Select Your Windows Version Number and Click "ENTER"
echo.
echo        [1] Windows 11 Home             l       [5] Windows 10 Home             l      [9] Windows 8.1 Home         l
echo        ================================l=======================================l===================================l
echo        [2] Windows 11 Pro              l       [6] Windows 10 Pro              l      [10] Windows 8.1 Pro         l
echo        ================================l=======================================l===================================l
echo        [3] Windows 11 Education        l       [7] Windows 10 Education        l      [11] Windows 8.1 Education   l
echo        ================================l=======================================l===================================l
echo        [4] Windows 11 Enterprise       l       [8] Windows 10 Enterprise       l      [12] Windows 8.1 Enterprise  l  
echo        ================================l=======================================l===================================l
echo                            l  [13] Windows 8 Home          l  [17] Windows 7 Home          l
echo                            l===============================l===============================l
echo                            l  [14] Windows 8 Pro           l  [18] Windows 7 Pro           l
echo                            l===============================l===============================l
echo                            l  [15] Windows 8 Education     l  [19] Windows 7 Ultimate      l
echo                            l===============================l===============================l
echo                            l  [16] Windows 8 Enterprise    l  [20] Windows 7 Enterprise    l
echo                            l===============================l===============================l
echo.                           
echo                                  Select Your Office Version Number and Click "ENTER"
echo.
echo                            *===============================*===============================*
echo                            *  [21] Office 365 ProPlus      *  [22] Office 2021             *
echo                            *===============================*===============================*
echo                            *  [23] Office 2019             *  [24] Office 2016             *
echo                            *===============================*===============================*
echo                            *  [25] Office 2013             *  [26] Office 2010             *
echo                            *===============================*===============================*
echo.
echo                                                         [0] EXIT
set /p op=">>>> "
if %op%==1 goto 1
if %op%==2 goto 2
if %op%==3 goto 3
if %op%==4 goto 4
if %op%==5 goto 5
if %op%==6 goto 6
if %op%==7 goto 7
if %op%==8 goto 8
if %op%==9 goto 9
if %op%==10 goto 10
if %op%==11 goto 11
if %op%==12 goto 12
if %op%==13 goto 13
if %op%==14 goto 14
if %op%==15 goto 15
if %op%==16 goto 16
if %op%==17 goto 17
if %op%==18 goto 18
if %op%==19 goto 19
if %op%==20 goto 20
if %op%==21 goto 21
if %op%==22 goto 22
if %op%==23 goto 23
if %op%==24 goto 24
if %op%==25 goto 25
if %op%==26 goto 26
if %op%==0 goto exit
goto error


:1
cls
echo.
echo          _    _  _____  _   _ ______  _____  _    _  _____     __   __       _   _                         
echo "       | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | /  |     | | | |                        
echo "       | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | `| |     | |_| |  ___   _ __ ___    ___ 
echo "       | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | |  | |     |  _  | / _ \ | '_ ` _ \  / _ \
echo "       \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |__| |_    | | | || (_) || | | | | ||  __/
echo "        \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/\___/    \_| |_/ \___/ |_| |_| |_| \___|
echo.
echo            You are selected WINDOWS 11 Home !
echo.                                                   
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w11h
if %op%==2 goto menu
goto error2
:w11h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr.vbs /ipk TX9XD-98N7V-6WMQ6-BX7FG-H8Q99
slmgr.vbs /skms kms.lotro.cc
slmgr.vbs /ato
cls
echo =====================================
echo. Windows 11 is Activated Succesfully.
echo =====================================
pause
goto menu


:2
cls
echo.
echo            _    _  _____  _   _ ______  _____  _    _  _____     __   __      ______              
echo "         | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | /  |     | ___ \             
echo "         | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | `| |     | |_/ / _ __   ___  
echo "         | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | |  | |     |  __/ | '__| / _ \ 
echo "         \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |__| |_    | |    | |   | (_) |
echo "          \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/\___/    \_|    |_|    \___/ 
echo.
echo "          You are selected WINDOWS 11 Pro !
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w11p
if %op%==2 goto menu
goto error2
:w11p
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr.vbs /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX
slmgr.vbs /skms kms.lotro.cc
slmgr.vbs /ato
cls
echo =====================================
echo. Windows 11 is Activated Succesfully.
echo =====================================
pause
goto menu


:3
cls
echo.
echo      _    _  _____  _   _ ______  _____  _    _  _____     __   __       _____      _                      _    _    
echo "   | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | /  |     |  ___|    | |                    | |  (_)   
echo "   | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | `| |     | |__    __| | _   _   ___   __ _ | |_  _    
echo "   | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | |  | |     |  __|  / _` || | | | / __| / _` || __|| |   
echo "   \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |__| |_    | |___ | (_| || |_| || (__ | (_| || |_ | | _ 
echo "    \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/\___/    \____/  \__,_| \__,_| \___| \__,_| \__||_|(_)
echo.
echo "          You are selected WINDOWS 11 Education !
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w11ed
if %op%==2 goto menu
goto error2
:w11ed
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr.vbs /ipk NW6C2-QMPVW-D7KKK-3GKT6-VCFB2
slmgr.vbs /skms kms.lotro.cc
slmgr.vbs /ato
cls
echo =====================================
echo. Windows 11 is Activated Succesfully.
echo =====================================
pause
goto menu


:4
cls
echo.
echo       _    _  _____  _   _ ______  _____  _    _  _____     __   __       _____         _                               
echo "    | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | /  |     |  ___|       | |                              
echo "    | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | `| |     | |__   _ __  | |_   ___  _ __  _ __   _ __    
echo "    | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | |  | |     |  __| | '_ \ | __| / _ \| '__|| '_ \ | '__|   
echo "    \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |__| |_    | |___ | | | || |_ |  __/| |   | |_) || | _ 
echo "     \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/\___/    \____/ |_| |_| \__| \___||_|   | .__/ |_|(_)
echo "                                                                                                       | |
echo "         You are selected WINDOWS 11 Education !                                                       |_|
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w11en
if %op%==2 goto menu
goto error2
:w11en
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr.vbs /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43B8YKP-D69TJ
slmgr.vbs /skms kms.lotro.cc
slmgr.vbs /ato
cls
echo =====================================
echo. Windows 11 is Activated Succesfully.
echo =====================================
pause
goto menu


:5
cls
echo.
echo        _    _  _____  _   _ ______  _____  _    _  _____     __   _____     _   _                          
echo "     | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | |  _  |   | | | |                         
echo "     | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | | |/' |   | |_| |  ___   _ __ ___    ___  
echo "     | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | | |  /| |   |  _  | / _ \ | '_ ` _ \  / _ \ 
echo "     \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |_\ |_/ /   | | | || (_) || | | | | ||  __/ 
echo "      \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/ \___/    \_| |_/ \___/ |_| |_| |_| \___| 
echo.
echo        You are selected WINDOWS 10 Home !
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w10h
if %op%==2 goto menu
goto error2
:w10h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk TX9XD-98N7V-6WMQ6-BX7FG-H8Q99
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 10 is Activated Succesfully.
echo =====================================
pause
goto menu


:6
cls
echo.
echo        _    _  _____  _   _ ______  _____  _    _  _____     __   _____    ______            
echo "     | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | |  _  |   | ___ \           
echo "     | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | | |/' |   | |_/ /_ __  ___  
echo "     | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | | |  /| |   |  __/| '__|/ _ \ 
echo "     \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |_\ |_/ /   | |   | |  | (_) |
echo "      \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/ \___/    \_|   |_|   \___/ 
echo.
echo        You are selected WINDOWS 10 Pro !
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w10p
if %op%==2 goto menu
goto error2
:w10p
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 10 is Activated Succesfully.
echo =====================================
pause
goto menu


:7
cls
echo.
echo      _    _  _____  _   _ ______  _____  _    _  _____     __   _____     _____     _                     _    _     
echo "   | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | |  _  |   |  ___|   | |                   | |  (_)    
echo "   | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | | |/' |   | |__   __| | _   _   ___  __ _ | |_  _     
echo "   | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | | |  /| |   |  __| / _` || | | | / __|/ _` || __|| |    
echo "   \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |_\ |_/ /   | |___| (_| || |_| || (__| (_| || |_ | | _  
echo "    \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/ \___/    \____/ \__,_| \__,_| \___|\__,_| \__||_|(_) 
echo.
echo        You are selected WINDOWS 10 Education !
echo.
echo                        [1] Continue Activation                      [2]Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w10ed
if %op%==2 goto menu
goto error2
:w10ed
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk NW6C2-QMPVW-D7KKK-3GKT6-VCFB2
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 10 is Activated Succesfully.
echo =====================================
pause
goto menu


:8
cls
echo.
echo       _    _  _____  _   _ ______  _____  _    _  _____     __   _____     _____        _                            
echo "    | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   /  | |  _  |   |  ___|      | |                           
echo "    | |  | |  | |  |  \| || | | || | | || |  | |\ `--.    `| | | |/' |   | |__  _ __  | |_  ___  _ __  _ __   _ __  
echo "    | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    | | |  /| |   |  __|| '_ \ | __|/ _ \| '__|| '_ \ | '__| 
echo "    \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   _| |_\ |_/ /   | |___| | | || |_|  __/| |   | |_) || | _  
echo "     \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \___/ \___/    \____/|_| |_| \__|\___||_|   | .__/ |_|(_) 
echo "                                                                                                      | |           
echo "                                                                                                      |_|           
echo        You are selected WINDOWS 10 Education !
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w10en
if %op%==2 goto menu
goto error2
:w10en
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 10 is Activated Succesfully.
echo =====================================
pause
goto menu


:9
cls
echo.
echo    _    _  _____  _   _ ______  _____  _    _  _____     _____     __       _   _                         
echo " | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   /  |     | | | |                        
echo " | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    `| |     | |_| |  ___   _ __ ___    ___ 
echo " | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \     | |     |  _  | / _ \ | '_ ` _ \  / _ \
echo " \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| | _ _| |_    | | | || (_) || | | | | ||  __/
echo "  \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/(_)\___/    \_| |_/ \___/ |_| |_| |_| \___|
echo.
echo        You are selected WINDOWS 8.1 Home !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8h
if %op%==2 goto menu
goto error2
:w8h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8.1 is Activated Succesfully.
echo =====================================
pause
goto menu


:10
cls
echo.
echo     _    _  _____  _   _ ______  _____  _    _  _____     _____     __      ______            
echo "  | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   /  |     | ___ \           
echo "  | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    `| |     | |_/ /_ __  ___  
echo "  | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \     | |     |  __/| '__|/ _ \ 
echo "  \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| | _ _| |_    | |   | |  | (_) |
echo "   \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/(_)\___/    \_|   |_|   \___/ 
echo.
echo        You are selected WINDOWS 8.1 Pro !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8h
if %op%==2 goto menu
goto error2
:w8h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8.1 is Activated Succesfully.
echo =====================================
pause
goto menu


:11
cls
echo.
echo    _    _  _____  _   _ ______  _____  _    _  _____     _____     __       _   _                         
echo " | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   /  |     | | | |                        
echo " | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    `| |     | |_| |  ___   _ __ ___    ___ 
echo " | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \     | |     |  _  | / _ \ | '_ ` _ \  / _ \
echo " \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| | _ _| |_    | | | || (_) || | | | | ||  __/
echo "  \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/(_)\___/    \_| |_/ \___/ |_| |_| |_| \___|
echo.
echo        You are selected WINDOWS 8.1 Home !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8h
if %op%==2 goto menu
goto error2
:w8h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8.1 is Activated Succesfully.
echo =====================================
pause
goto menu


:12
cls
echo.
echo    _    _  _____  _   _ ______  _____  _    _  _____     _____     __       _   _                         
echo " | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   /  |     | | | |                        
echo " | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    `| |     | |_| |  ___   _ __ ___    ___ 
echo " | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \     | |     |  _  | / _ \ | '_ ` _ \  / _ \
echo " \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| | _ _| |_    | | | || (_) || | | | | ||  __/
echo "  \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/(_)\___/    \_| |_/ \___/ |_| |_| |_| \___|
echo.
echo        You are selected WINDOWS 8.1 Home !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8h
if %op%==2 goto menu
goto error2
:w8h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8.1 is Activated Succesfully.
echo =====================================
pause
goto menu


:13
cls
echo.
echo        _    _  _____  _   _ ______  _____  _    _  _____     _____     _   _                         
echo "     | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   | | | |                        
echo "     | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    | |_| |  ___   _ __ ___    ___ 
echo "     | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \    |  _  | / _ \ | '_ ` _ \  / _ \
echo "     \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| |   | | | || (_) || | | | | ||  __/
echo "      \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/   \_| |_/ \___/ |_| |_| |_| \___|
echo.
echo        You are selected WINDOWS 8 Home !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8h
if %op%==2 goto menu
goto error2
:w8h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8 is Activated Succesfully.
echo =====================================
pause
goto menu


:14
cls
echo.
echo        _    _  _____  _   _ ______  _____  _    _  _____     _____    ______            
echo "     | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   | ___ \           
echo "     | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    | |_/ /_ __  ___  
echo "     | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \    |  __/| '__|/ _ \ 
echo "     \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| |   | |   | |  | (_) |
echo "      \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/   \_|   |_|   \___/ 
echo.
echo        You are selected WINDOWS 8 Pro !              NOT-WORKING
echo.
echo                  [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8p
if %op%==2 goto menu
goto error2
:w8p
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8 is Activated Succesfully.
echo =====================================
pause
goto menu

:15
cls
echo.
echo         _    _  _____  _   _ ______  _____  _    _  _____     _____      _____      _                      _      
echo "      | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |    |  ___|    | |                    | |     
echo "      | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /     | |__    __| | _   _   ___   __ _ | |_    
echo "      | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \     |  __|  / _` || | | | / __| / _` || __|   
echo "      \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| |    | |___ | (_| || |_| || (__ | (_| || |_  _ 
echo "       \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/    \____/  \__,_| \__,_| \___| \__,_| \__|(_)
echo "                                                                              
echo "      You are selected WINDOWS 8 Enterprise !             NOT-WORKING         
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8ed
if %op%==2 goto menu
goto error2
:w8ed
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8 is Activated Succesfully.
echo =====================================
pause
goto menu


:16
cls
echo.
echo         _    _  _____  _   _ ______  _____  _    _  _____     _____     _____        _                           
echo "      | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |  _  |   |  ___|      | |                          
echo "      | |  | |  | |  |  \| || | | || | | || |  | |\ `--.     \ V /    | |__  _ __  | |_  ___  _ __  _ __   _ __ 
echo "      | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \    / _ \    |  __|| '_ \ | __|/ _ \| '__|| '_ \ | '__|
echo "      \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   | |_| |   | |___| | | || |_|  __/| |   | |_) || | _ 
echo "       \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_____/   \____/|_| |_| \__|\___||_|   | .__/ |_|(_)
echo "                                                                                                   | |          
echo "      You are selected WINDOWS 8 Enterprise !             NOT-WORKING                              |_|          
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w8en
if %op%==2 goto menu
goto error2
:w8en
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 8 is Activated Succesfully.
echo =====================================
pause
goto menu


:17
cls
echo.
echo        _    _  _____  _   _ ______  _____  _    _  _____     ______    _   _                         
echo "     | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |___  /   | | | |                        
echo "     | |  | |  | |  |  \| || | | || | | || |  | |\ `--.       / /    | |_| |  ___   _ __ ___    ___ 
echo "     | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \     / /     |  _  | / _ \ | '_ ` _ \  / _ \
echo "     \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   ./ /      | | | || (_) || | | | | ||  __/
echo "      \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_/       \_| |_/ \___/ |_| |_| |_| \___|
echo.
echo        You are selected WINDOWS 7 Home !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w7h
if %op%==2 goto menu
goto error2
:w7h
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 7 is Activated Succesfully.
echo =====================================
pause
goto menu



:18
cls
echo.
echo        _    _  _____  _   _ ______  _____  _    _  _____     ______   ______            
echo "     | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |___  /   | ___ \           
echo "     | |  | |  | |  |  \| || | | || | | || |  | |\ `--.       / /    | |_/ /_ __  ___  
echo "     | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \     / /     |  __/| '__|/ _ \ 
echo "     \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   ./ /      | |   | |  | (_) |
echo "      \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_/       \_|   |_|   \___/ 
echo.
echo        You are selected WINDOWS 7 Pro !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w7p
if %op%==2 goto menu
goto error2
:w7p
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 7 is Activated Succesfully.
echo =====================================
pause
goto menu


:19
cls
echo.
echo       _    _  _____  _   _ ______  _____  _    _  _____     ______    _   _  _  _    _                    _        
echo "    | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |___  /   | | | || || |  (_)                  | |       
echo "    | |  | |  | |  |  \| || | | || | | || |  | |\ `--.       / /    | | | || || |_  _  _ __ ___    __ _ | |_  ___ 
echo "    | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \     / /     | | | || || __|| || '_ ` _ \  / _` || __|/ _ \
echo "    \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   ./ /      | |_| || || |_ | || | | | | || (_| || |_|  __/
echo "     \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_/        \___/ |_| \__||_||_| |_| |_| \__,_| \__|\___|
echo.
echo        You are selected WINDOWS 7 Ultimate !              NOT-WORKING
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w7ul
if %op%==2 goto menu
goto error2
:w7ul
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 7 is Activated Succesfully.
echo =====================================
pause
goto menu


:20
cls
echo.
echo         _    _  _____  _   _ ______  _____  _    _  _____     ______    _____        _                           
echo "      | |  | ||_   _|| \ | ||  _  \|  _  || |  | |/  ___|   |___  /   |  ___|      | |                          
echo "      | |  | |  | |  |  \| || | | || | | || |  | |\ `--.       / /    | |__  _ __  | |_  ___  _ __  _ __   _ __ 
echo "      | |/\| |  | |  | . ` || | | || | | || |/\| | `--. \     / /     |  __|| '_ \ | __|/ _ \| '__|| '_ \ | '__|
echo "      \  /\  / _| |_ | |\  || |/ / \ \_/ /\  /\  //\__/ /   ./ /      | |___| | | || |_|  __/| |   | |_) || | _ 
echo "       \/  \/  \___/ \_| \_/|___/   \___/  \/  \/ \____/    \_/       \____/|_| |_| \__|\___||_|   | .__/ |_|(_)
echo "                                                                                                   | |          
echo "          You are selected WINDOWS 7 Enterprise !            NOT-WORKING                           |_|         
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto w7en
if %op%==2 goto menu
goto error2
:w7en
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
slmgr /ipk 
slmgr /skms kms8.msguides.com
slmgr /ato
cls
echo =====================================
echo. Windows 7 is Activated Succesfully.
echo =====================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu

:21
cls
echo.
echo              ____   __  __ _            ____    __ _____   _____           _____  _           
echo "           / __ \ / _|/ _(_)          |___ \  / /| ____| |  __ \         |  __ \| |          
echo "          | |  | | |_| |_ _  ___ ___    __) |/ /_| |__   | |__) | __ ___ | |__) | |_   _ ___ 
echo "          | |  | |  _|  _| |/ __/ _ \  |__ <| '_ \___ \  |  ___/ '__/ _ \|  ___/| | | | / __|
echo "          | |__| | | | | | | (_|  __/  ___) | (_) |__) | | |   | | | (_) | |    | | |_| \__ \
echo "           \____/|_| |_| |_|\___\___| |____/ \___/____/  |_|   |_|  \___/|_|    |_|\__,_|___/
echo "                                                                                                                                          
echo "            You are selected Office 365 ProPlus !            NOT-WORKING                                     
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto o365
if %op%==2 goto menu
goto error2
:o365
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
title Activate Office 365 ProPlus for FREE - MSGuides.com&cls&echo =====================================================================================&echo #Project: Activating Microsoft software products for FREE without additional software&echo =====================================================================================&echo.&echo #Supported products: Office 365 ProPlus (x86-x64)&echo.&echo.&(if exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16")&(if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16")&(for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&(for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&echo.&echo ============================================================================&echo Activating your Office...&cscript //nologo slmgr.vbs /ckms >nul&cscript //nologo ospp.vbs /setprt:1688 >nul&cscript //nologo ospp.vbs /unpkey:WFG99 >nul&cscript //nologo ospp.vbs /unpkey:DRTFM >nul&cscript //nologo ospp.vbs /unpkey:BTDRB >nul&set i=1&cscript //nologo ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 >nul||cscript //nologo ospp.vbs /inpkey:NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP >nul||goto notsupported 
:skms 
title Activate Office 365 ProPlus for FREE - MSGuides.com&cls&echo =====================================================================================&echo #Project: Activating Microsoft software products for FREE without additional software&echo =====================================================================================&echo.&echo #Supported products: Office 365 ProPlus (x86-x64)&echo.&echo.&(if exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16")&(if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16")&(for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&(for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&echo.&echo ============================================================================&echo Activating your Office...&cscript //nologo slmgr.vbs /ckms >nul&cscript //nologo ospp.vbs /setprt:1688 >nul&cscript //nologo ospp.vbs /unpkey:WFG99 >nul&cscript //nologo ospp.vbs /unpkey:DRTFM >nul&cscript //nologo ospp.vbs /unpkey:BTDRB >nul&set i=1&cscript //nologo ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 >nul||cscript //nologo ospp.vbs /inpkey:NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP >nul||goto notsupported 
:skms 
if %i% GTR 10 goto busy 
if %i% EQU 1 set KMS=kms7.MSGuides.com 
if %i% EQU 2 set KMS=s8.uk.to 
if %i% EQU 3 set KMS=s9.us.to 
if %i% GTR 3 goto ato 
cscript //nologo ospp.vbs /sethst:%KMS% >nul 
:ato 
echo ============================================================================&echo.&echo.&cscript //nologo ospp.vbs /act | find /i "successful" && (echo.&echo ============================================================================&echo.&echo #My official blog: MSGuides.com&echo.&echo #How it works: bit.ly/kms-server&echo.&echo #Please feel free to contact me at msguides.com@gmail.com if you have any questions or concerns.&echo.&echo #Please consider supporting this project: donate.msguides.com&echo #Your support is helping me keep my servers running 24/7!&echo.&echo ============================================================================&choice /n /c YN /m "Would you like to visit my blog [Y,N]?" & if errorlevel 2 exit) || (echo The connection to my KMS server failed! Trying to connect to another one... & echo Please wait... & echo. & echo. & set /a i+=1 & goto skms) explorer "http://MSGuides.com"&goto halt 
:notsupported 
echo ============================================================================&echo.&echo Sorry, your version is not supported.&echo.&goto halt 
:busy
echo ============================================================================&echo.&echo Sorry, the server is busy and can't respond to your request. Please try again.&echo. 
:halt 
pause 
cls
echo ===================================================
echo. Activate Office 365 ProPlus Activated Succesfully.
echo ===================================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu

:22
cls
echo.
echo "              ____   __  __ _            ___   ___ ___  __ 
echo "             / __ \ / _|/ _(_)          |__ \ / _ \__ \/_ |
echo "            | |  | | |_| |_ _  ___ ___     ) | | | | ) || |
echo "            | |  | |  _|  _| |/ __/ _ \   / /| | | |/ / | |
echo "            | |__| | | | | | | (_|  __/  / /_| |_| / /_ | |
echo "             \____/|_| |_| |_|\___\___| |____|\___/____||_|                                                                                     
echo "                                                                                                                                          
echo "            You are selected Office 2021 !                NOT-WORKING                                     
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto o2021
if %op%==2 goto menu
goto error2
:o2021
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
title Activate Microsoft Office 2021 (ALL versions) for FREE - MSGuides.com&cls&echo =====================================================================================&echo #Project: Activating Microsoft software products for FREE without additional software&echo =====================================================================================&echo.&echo #Supported products:&echo - Microsoft Office Standard 2021&echo - Microsoft Office Professional Plus 2021&echo.&echo.&(if exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16")&(if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16")&(for /f %%x in ('dir /b ..\root\Licenses16\ProPlus2021VL_KMS*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&echo.&echo =====================================================================================&echo Activating your product...&cscript //nologo slmgr.vbs /ckms >nul&cscript //nologo ospp.vbs /setprt:1688 >nul&cscript //nologo ospp.vbs /unpkey:6F7TH >nul&set i=1&cscript //nologo ospp.vbs /inpkey:FXYTK-NJJ8C-GB6DW-3DYQT-6F7TH >nul||goto notsupported 
:skms 
if %i% GTR 10 goto busy 
if %i% EQU 1 set KMS=kms7.MSGuides.com 
if %i% EQU 2 set KMS=s8.uk.to 
if %i% EQU 3 set KMS=s9.us.to 
if %i% GTR 3 goto ato 
cscript //nologo ospp.vbs /sethst:%KMS% >nul 
:ato 
echo =====================================================================================&echo.&echo.&cscript //nologo ospp.vbs /act | find /i "successful" && (echo.&echo =====================================================================================&echo.&echo #My official blog: MSGuides.com&echo.&echo #How it works: bit.ly/kms-server&echo.&echo #Please feel free to contact me at msguides.com@gmail.com if you have any questions or concerns.&echo.&echo #Please consider supporting this project: donate.msguides.com&echo #Your support is helping me keep my servers running 24/7!&echo.&echo =====================================================================================&choice /n /c YN /m "Would you like to visit my blog [Y,N]?" & if errorlevel 2 exit) || (echo The connection to my KMS server failed! Trying to connect to another one... & echo Please wait... & echo. & echo. & set /a i+=1 & goto skms) explorer "http://MSGuides.com"&goto halt 
:notsupported 
echo =====================================================================================&echo.&echo Sorry, your version is not supported.&echo.&goto halt 
:busy 
echo =====================================================================================&echo.&echo Sorry, the server is busy and can't respond to your request. Please try again.&echo. 
:halt 
pause
cls
echo ===================================================
echo. Activate Office 2021 Activated Succesfully.
echo ===================================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu

:23
cls
echo.
echo "        ____   __  __ _            ___   ___  __  ___  
echo "       / __ \ / _|/ _(_)          |__ \ / _ \/_ |/ _ \ 
echo "      | |  | | |_| |_ _  ___ ___     ) | | | || | (_) |
echo "      | |  | |  _|  _| |/ __/ _ \   / /| | | || |\__, |
echo "      | |__| | | | | | | (_|  __/  / /_| |_| || |  / / 
echo "       \____/|_| |_| |_|\___\___| |____|\___/ |_| /_/  
echo "                                                                                                                                                                                           
echo "       You are selected Office 2019 !                NOT-WORKING                                     
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto o2019
if %op%==2 goto menu
goto error2
:o2019
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
title Activate Microsoft Office 2019 (ALL versions) for FREE - MSGuides.com&cls&echo =====================================================================================&echo #Project: Activating Microsoft software products for FREE without additional software&echo =====================================================================================&echo.&echo #Supported products:&echo - Microsoft Office Standard 2019&echo - Microsoft Office Professional Plus 2019&echo.&echo.&(if exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16")&(if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16")&(for /f %%x in ('dir /b ..\root\Licenses16\ProPlus2019VL*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&(for /f %%x in ('dir /b ..\root\Licenses16\ProPlus2019VL*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&echo.&echo ============================================================================&echo Activating your Office...&cscript //nologo slmgr.vbs /ckms >nul&cscript //nologo ospp.vbs /setprt:1688 >nul&cscript //nologo ospp.vbs /unpkey:6MWKP >nul&set i=1&cscript //nologo ospp.vbs /inpkey:NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP >nul||goto notsupported 
:skms 
if %i% GTR 10 goto busy 
if %i% EQU 1 set KMS=kms7.MSGuides.com 
if %i% EQU 2 set KMS=s8.uk.to 
if %i% EQU 3 set KMS=s9.us.to 
if %i% GTR 3 goto ato 
cscript //nologo ospp.vbs /sethst:%KMS% >nul 
:ato 
echo ============================================================================&echo.&echo.&cscript //nologo ospp.vbs /act | find /i "successful" && (echo.&echo ============================================================================&echo.&echo #My official blog: MSGuides.com&echo.&echo #How it works: bit.ly/kms-server&echo.&echo #Please feel free to contact me at msguides.com@gmail.com if you have any questions or concerns.&echo.&echo #Please consider supporting this project: donate.msguides.com&echo #Your support is helping me keep my servers running 24/7!&echo.&echo ============================================================================&choice /n /c YN /m "Would you like to visit my blog [Y,N]?" & if errorlevel 2 exit) || (echo The connection to my KMS server failed! Trying to connect to another one... & echo Please wait... & echo. & echo. & set /a i+=1 & goto skms) explorer "http://MSGuides.com"&goto halt 
:notsupported 
echo ============================================================================&echo.&echo Sorry, your version is not supported.&echo.&goto halt 
:busy 
echo ============================================================================&echo.&echo Sorry, the server is busy and can't respond to your request. Please try again.&echo.
:halt 
pause 
cls
echo ===================================================
echo. Activate Office 2019 Activated Succesfully.
echo ===================================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu


:24
cls
echo.
echo "
echo "        ____   __  __ _            ___   ___  __   __  
echo "       / __ \ / _|/ _(_)          |__ \ / _ \/_ | / /  
echo "      | |  | | |_| |_ _  ___ ___     ) | | | || |/ /_  
echo "      | |  | |  _|  _| |/ __/ _ \   / /| | | || | '_ \ 
echo "      | |__| | | | | | | (_|  __/  / /_| |_| || | (_) |
echo "       \____/|_| |_| |_|\___\___| |____|\___/ |_|\___/ 
echo "                                                 
echo "                                                                                                                                                                                           
echo "       You are selected Office 2016 !                NOT-WORKING                                     
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto o2016
if %op%==2 goto menu
goto error2
:o2016
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
title Activate Microsoft Office 2016 (ALL versions) for FREE - MSGuides.com&cls&echo =====================================================================================&echo #Project: Activating Microsoft software products for FREE without additional software&echo =====================================================================================&echo.&echo #Supported products:&echo - Microsoft Office Standard 2016&echo - Microsoft Office Professional Plus 2016&echo.&echo.&(if exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16")&(if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16")&(for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&(for /f %%x in ('dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" >nul)&echo.&echo ============================================================================&echo Activating your Office...&cscript //nologo ospp.vbs /setprt:1688 >nul&cscript //nologo ospp.vbs /unpkey:WFG99 >nul&cscript //nologo ospp.vbs /unpkey:DRTFM >nul&cscript //nologo ospp.vbs /unpkey:BTDRB >nul&cscript //nologo ospp.vbs /unpkey:CPQVG >nul&set i=1&cscript //nologo ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 >nul||goto notsupported 
:skms 
if %i% GTR 10 goto busy 
if %i% EQU 1 set KMS=kms7.MSGuides.com 
if %i% EQU 2 set KMS=s8.uk.to 
if %i% EQU 3 set KMS=s9.us.to 
if %i% GTR 3 goto ato 
cscript //nologo ospp.vbs /sethst:%KMS% >nul 
:ato 
echo ============================================================================&echo.&echo.&cscript //nologo ospp.vbs /act | find /i "successful" && (echo.&echo ============================================================================&echo.&echo #My official blog: MSGuides.com&echo.&echo #How it works: bit.ly/kms-server&echo.&echo #Please feel free to contact me at msguides.com@gmail.com if you have any questions or concerns.&echo.&echo #Please consider supporting this project: donate.msguides.com&echo #Your support is helping me keep my servers running 24/7!&echo.&echo ============================================================================&choice /n /c YN /m "Would you like to visit my blog [Y,N]?" & if errorlevel 2 exit) || (echo The connection to my KMS server failed! Trying to connect to another one... & echo Please wait... & echo. & echo. & set /a i+=1 & goto skms) explorer "http://MSGuides.com"&goto halt 
:notsupported 
echo ============================================================================&echo.&echo Sorry, your version is not supported.&echo.&goto halt 
:busy 
echo ============================================================================&echo.&echo Sorry, the server is busy and can't respond to your request. Please try again.&echo. 
:halt
pause
cls
echo ===================================================
echo. Activate Office 2016 Activated Succesfully.
echo ===================================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu

:25
cls
echo.
echo "        ____   __  __ _            ___   ___  __ ____  
echo "       / __ \ / _|/ _(_)          |__ \ / _ \/_ |___ \ 
echo "      | |  | | |_| |_ _  ___ ___     ) | | | || | __) |
echo "      | |  | |  _|  _| |/ __/ _ \   / /| | | || ||__ < 
echo "      | |__| | | | | | | (_|  __/  / /_| |_| || |___) |
echo "       \____/|_| |_| |_|\___\___| |____|\___/ |_|____/ 
echo "                                                                                                 
echo "                                                                                                                                                                                           
echo "       You are selected Office 2013 !                NOT-WORKING                                     
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto o2013
if %op%==2 goto menu
goto error2
:o2013
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
title Activate Office 2013 without additional software
if exist "%ProgramFiles%\Microsoft Office\Office15\ospp.vbs" set folder="%ProgramFiles%\Microsoft Office\Office15" 
if exist "%ProgramFiles(x86)%\Microsoft Office\Office15\ospp.vbs" set folder="%ProgramFiles(x86)%\Microsoft Office\Office15" 
if exist "%ProgramFiles%\Microsoft Office\Office14\ospp.vbs" set folder="%ProgramFiles%\Microsoft Office\Office14" 
if exist "%ProgramFiles(x86)%\Microsoft Office\Office14\ospp.vbs" set folder="%ProgramFiles(x86)%\Microsoft Office\Office14"
cscript %folder%\ospp.vbs /inpkey:VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB
cscript %folder%\ospp.vbs /inpkey:YC7DK-G2NP3-2QQC3-J6H88-GVGXT
cscript %folder%\ospp.vbs /sethst:kms8.msguides.com
cscript %folder%\ospp.vbs /setprt:1688 
cscript %folder%\ospp.vbs /act
echo Office should be activated
pause
cls
echo ===================================================
echo. Activate Office 2013 Activated Succesfully.
echo ===================================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu

:26
cls
echo.
echo "        ____   __  __ _            ___   ___  __  ___  
echo "       / __ \ / _|/ _(_)          |__ \ / _ \/_ |/ _ \ 
echo "      | |  | | |_| |_ _  ___ ___     ) | | | || | | | |
echo "      | |  | |  _|  _| |/ __/ _ \   / /| | | || | | | |
echo "      | |__| | | | | | | (_|  __/  / /_| |_| || | |_| |
echo "       \____/|_| |_| |_|\___\___| |____|\___/ |_|\___/                                                  
echo "                                                                                                 
echo "                                                                                                                                                                                           
echo "        You are selected Office 2010 !                NOT-WORKING                                     
echo.
echo                        [1] Continue Activation                      [2] Back to Menu
echo.
set /p op=">>>> "
if %op%==1 goto o2010
if %op%==2 goto menu
goto error2
:o2010
echo =======================
echo. Please wait.......    
echo =======================
ping localhost -n 3 >nul
title Activate Office 2010 without additional software
if exist "%ProgramFiles%\Microsoft Office\Office15\ospp.vbs" set folder="%ProgramFiles%\Microsoft Office\Office15" 
if exist "%ProgramFiles(x86)%\Microsoft Office\Office15\ospp.vbs" set folder="%ProgramFiles(x86)%\Microsoft Office\Office15" 
if exist "%ProgramFiles%\Microsoft Office\Office14\ospp.vbs" set folder="%ProgramFiles%\Microsoft Office\Office14" 
if exist "%ProgramFiles(x86)%\Microsoft Office\Office14\ospp.vbs" set folder="%ProgramFiles(x86)%\Microsoft Office\Office14"
cscript %folder%\ospp.vbs /inpkey:VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB
cscript %folder%\ospp.vbs /inpkey:YC7DK-G2NP3-2QQC3-J6H88-GVGXT
cscript %folder%\ospp.vbs /sethst:kms8.msguides.com
cscript %folder%\ospp.vbs /setprt:1688 
cscript %folder%\ospp.vbs /act
echo Office should be activated
pause
cls
echo ===================================================
echo. Activate Office 2010 Activated Succesfully.
echo ===================================================
pause
goto menu


:error
cls
echo PLS Select Correct Number - (1-20).
ping localhost -n 4 >nul
goto menu

:error2
cls
echo PLS Select Correct Number - (1 or 2).
ping localhost -n 4 >nul
goto menu

:exit
